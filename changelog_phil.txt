PP-Phil_20121128
================

- Removed unused build variable. Switched version to a date build (experimental)
- Added a dev toggle switch to handle @insert switching for source vs compiled.
- Adjusting about screen to remove registration readout and to add LW version and platform information.
- Removed dongle check code that was obsolete.
- Removed Mac CFM code chunk - CFM was never supported, based on the code comments.
- Optimised the @insert statements to make the code more readable and maintainable.
- Discovered that @insert doesn't work with icon resources - you have to include them in the main script.
- Moved variables out of code into a separate file to reduce clutter and needless duplication.
- Removed dead code that was disabled by previous contributors for better alternatives.
- Fixed indenting in original code.
- Moved UDF code to a dedicated file.
- Worked around About box corruption (bug p0001) by disabling drawline calls in the req_redraw function. Added an explicit line drawing call in the about box function instead.

20121129
========

- Trying to re-enable disabled lens flare and volumetric properties support for lights. Untested.
- Major optimisation of the SceneGen code :
	- Started by splitting code and looking for differences between frame and sequence mode. Based on differences, added a 'mode' switch ("frame" or "seq"). This then drives the output string formatting and naming. This allowed the majority of the simplification.
	- Added a new internal function called generatePath that takes inputs common to all of the SaverPath generation steps. This reduces duplication in the save code to function calls with similar parameters. The save function utilises mode to determine how to construct the final path.
	- Reduced code by 20 KB. Redundant saverPath code will be removed once experimental changes for generic path construction have been validated.
- Pushing UI layout variables into new passEditor_UIglobals.ls file, to be able to easily share layout settings between edit and create override dialogs, for example. All dialogs migrated and tested. Moved 7 KB of variable definitions out of the Interface_Subfuncs file. Some code increase due to the revised dialog in the editing section, but at least it is all now consistent. Will consider a further optimisation in a future revision.
- Minor coding style fixes (bug p0002).

20121130
========

- Fixed obscure startup bug p0003 in the code.
- Running QA tests on pass generation and functionality from yesterdays sweeping changes....
 - Bug p0004 fixed in argument order for new SceneGen code. Now works properly.
 - Bug p0005 fixed : had overlooked a legacy path construction chunk of code that missed a getsep() call originally and hadn't been migrated to the new generic construction func.
 - LWO saver code was broken in original script (p0006). Moved to the generatePath function. Potential for simplification exploited as well - duplicate code in save path eliminated with a single instance. Saver construct was also easily matched to generic form in function.
 - Validating object property overrides : visible to camera; visible to rays
 - Validated surface override
 - Validated alternative object override
 - Validated light exclusion override
 - Validating master scene override :
  - Bug p0007 identified - master scene override will fail if anything other than the (Scene Master) is added :
	- Initial fix is to empty the assignmentArray for this override - it should be nil to avoid issues. Had to also add some safety checks for nil for size(assignmentArray) later in code due to this.
- Bug p0008 identified and preliminary triage added - if the overrideType is (nil), size() will choke badly in the 'failsafe' conditional in sceneGen. Trying to avoid this and more cleanly handle the situation.
- Bug p0009 related to the above - it is possible to add elements to overrides that are incompatible with that override (e.g. surfacing overrides to lights)
 - Fix will be to screen right hand column contents to avoid listing incompatible types for overrides. UDF code needs serious work to address this (also for add all, etc. buttons).

- 30 KB less code right now compared to original source.

Bugs :
------

p0001 : About screen corruption (Fixed)
p0002 : Coding style issues (Review ongoing, largely fixed)
p0003 : Start-up bug. (Fixed)
p0004 : SceneGen routine blows up. (Fixed)
p0005 : path incorrect. (Fixed)
p0006 : LWO saver blowing up. (Fixed)
p0007 : Master scene override failure if anything other than, or in addition to, (Scene Master) is assigned to it. (Fixed, better fix needed - see p0009)
p0008 : Failsafe code for overrideType needs to be made more robust. (Fixed)
p0009 : Item list needs to be filtered based on override selection, to avoid assigning incompatible overrides to scene elements. (Assigned, ongoing)
 
Reference :
-----------

settingsarray tracks what is to be done. The 'type' of entity in the array is defined arbitrarily as :

	case 1: "   (.srf file)"
	case 2: "   (object properties)"
	case 3: "   (.mot file)"
	case 4: "   (.lwo file)"
	case 5: "   (light properties)"
	case 6: "   (scene properties)"
	case 7: "   (light exclusion)"

Issues to check :
-----------------

- migrate override properties for each supported type into an array, and make the handling code aware of the array. Easier to extend with new features. Probably also need to make the UI code similarly flexible over time.
- all features post-9.3.1 need to be reviewed and checked against the scene file.
	- Scene Master override is the primary issue now.
	- requires *heavy* research into the SceneGen code....
	- radiosity example :
	    new interface elements to allow access to the new features, probably revamping the scene master override type. Or maybe creating a new override type and method of assigning.
		parse support for finding where in the scene the new radiosity information is stored. in other words, what's before it, and what's after it in the scene file?
		parse support for writing that information, from the override properties, into the render scene. you'll have to set up and obey all the if/then switches of testing if the override is assigned, then testing if the information is already in the scene file, then if all the conditions are right, plugging in the override radiosity into the render scene instead of the live scene radiosity settings.


